name: Develop

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install packages
        shell: bash
        run: brew install qt@5 cmake sqlite3 catch2 && brew link --force qt && sudo ln -s /usr/local/Cellar/qt/6.*/share/qt/mkspecs /usr/local/mkspecs && sudo ln -s /usr/local/Cellar/qt/6*/share/qt/plugins /usr/local/plugins

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: export PATH=/usr/local/opt/qt/bin:$PATH && cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --target BuzzBot --config $BUILD_TYPE && cmake --build . --target functions_test

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest functions_test

      - name: Run Deploy Qt Library
        run: ls -alh ${{runner.workspace}}/build && macdeployqt ${{runner.workspace}}/build/BuzzBot.app -always-overwrite -appstore-compliant

      - name: Compress Artifact
        run: zip -r ${{runner.workspace}}/build/BuzzBot.zip ${{runner.workspace}}/build/BuzzBot.app

      - uses: actions/upload-artifact@v2
        with:
          name: BuzzBot
          path: ${{runner.workspace}}/build/BuzzBot.zip
